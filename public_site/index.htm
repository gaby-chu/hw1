<html>

<head>
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <script src="https://d3js.org/topojson.v2.min.js"></script>
    <style>
        .neighborhood {
            fill: #EEE;
            stroke: lightgray;
            stroke-width: 2px;
        }

        .gridlines .domain {
            display: none;
        }

        .gridlines line {
            stroke: lightgray;
        }

        h1 {
            text-align: center;
            font-family: Arial, sans-serif;
            padding: 20px;
        }
    </style>

</head>

<body>

    <h1>Most Common Tree Species in San Francisco</h1>

    <div style="text-align:center">
        <div class="barchart">
            <svg id="chart" height="700" width="800" style="background: #fff; margin-top:20px; margin-bottom: 20px"></svg>
        </div>
        <div style="text-align:center">
            <h2>Tree Species by Location</h2>
            <svg id="sf" height="900" width="1000" style="background: #fff; margin-top:20px"></svg>
        </div>


    </div>



    <script>
        const svg = d3.select("#sf");
        const width = svg.attr("width");
        const height = svg.attr("height");
        const margin = { top: 20, right: 20, bottom: 20, left: 20 };
        const mapWidth = width - margin.left - margin.right;
        const mapHeight = height - margin.top - margin.bottom;
        const map = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


        const requestData = async function () {
            const map_data = await d3.json("SF-Neighborhoods.geo.json");
            console.log(map_data);

            const neighborhoods = topojson.feature(map_data, map_data.objects.SFNeighborhoods);
            var projection = d3.geoMercator().fitSize([mapWidth, mapHeight], neighborhoods);
            var path = d3.geoPath().projection(projection);


            // make neighborhood paths
            map.selectAll("path.neighborhood").data(neighborhoods.features)
                .join("path")
                .attr("class", "neighborhood")
                .attr("d", path)

            // load in tree dataset
            const tree_data = await d3.csv("clean_data.csv");
            console.log(tree_data);

            // add position data for each tree data point in the dataset through projection
            tree_data.forEach(d => {
                d.Position = projection([d.Longitude, d.Latitude]);
            });


            //const uniqueSpecies = d3.map(tree_data, d => d.qSpecies);
            const uniqueSpecies = Array.from(new Set(tree_data.map((item) => item.qSpecies)))
            const unique = d3.map(tree_data, d => d.qSpecies)

            // load count data for bar chart
            count_data = await d3.csv("counts.csv");

            console.log(count_data);

            const colorScale = d3.scaleOrdinal()
                .domain(uniqueSpecies)
                .range(d3.schemeTableau10);


            //["#3A0800", "#494600", "#165700", "#006313", "#006F6A", "#002679", "#230082", "#850089", "#900739", "#95370F", "#9C083E", "#9E00A4", "#2E00AB", "#0039B3", "#00BAB3", "#00C225", "#33C900", "#D1C800", "#D81C00"]

            // use position data to plot tree points on map using circles
            map.selectAll("circle").data(tree_data)
                .join("circle")
                .attr("r", 1.5)
                .attr("opacity", 0.8)
                .attr("fill", d => colorScale(d.qSpecies))
                .attr("cx", d => d.Position[0])
                .attr("cy", d => d.Position[1]);

            let boxWidth = 200;
            let boxHeight = 100;
            let box = svg.append("g")
                .attr("class", "box")

            box.append("line")
                .attr("stroke", "black")
                .attr("stroke-width", "2px")
                .attr("x1", 635)
                .attr("x2", 870)
                .attr("y1", 373)
                .attr("y2", 270);

            box.append("line")
                .attr("stroke", "black")
                .attr("stroke-width", "2px")
                .attr("x1", 175)
                .attr("x2", 70)
                .attr("y1", 567)
                .attr("y2", 650);

            let market = box.append("text")
                .attr("fill", "black")
                .attr("text-anchor", "middle")
                .attr("alignment-baseline", "hanging")
                .attr("x", 920)
                .attr("y", 260)
                .text("Market Street:");
            let market2 = box.append("text")
                .attr("fill", "black")
                .attr("text-anchor", "middle")
                .attr("alignment-baseline", "hanging")
                .attr("x", 915)
                .attr("y", 290)
                .text("major transportation route");

            let sunset = box.append("text")
                .attr("fill", "black")
                .attr("text-anchor", "middle")
                .attr("alignment-baseline", "hanging")
                .attr("x", 60)
                .attr("y", 650)
                .text("Sunset Boulevard:");

            let sunset2 = box.append("text")
                .attr("fill", "black")
                .attr("text-anchor", "left")
                .attr("alignment-baseline", "hanging")
                .attr("x", 0)
                .attr("y", 680)
                .text("popular with runners and cyclists");


            const svg2 = d3.select("#chart");
            const width2 = svg2.attr("width");
            const height2 = svg2.attr("height");
            const margin2 = { top: 20, right: 20, bottom: 130, left: 80 };
            const chartWidth = width2 - margin2.left - margin2.right;
            const chartHeight = height2 - margin2.top - margin2.bottom;

            // const chart = svg2.append("g")
            //     .attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");
            let annotations = svg2.append("g").attr("id", "annotations");
            let chartArea = svg2.append("g").attr("id", "points")
                .attr("transform", `translate(${margin2.left},${margin2.top})`);



            // making scale for x axis - categorical species data so scaleBand()
            const speciesScale = d3.scaleBand().domain(uniqueSpecies).range([0, chartWidth])
                .padding(0.05);


            // making y axis
            const countExtent = d3.extent(count_data, d => Number(d.count));
            const countMax = d3.max(count_data, d => Number(d.count));
            const countScale = d3.scaleLinear().domain([0, countMax]).range([chartHeight, 0]);


            let leftAxis = d3.axisLeft(countScale);

            chartArea.append("text")
                .attr("class", "y label")
                .attr("text-anchor", "end")
                .attr("y", -80)
                .attr("x", -chartHeight / 2)
                .attr("dy", ".75em")
                .attr("transform", "rotate(-90)")
                .text("Amount of Trees");

            chartArea.append("text")
                .attr("class", "x label")
                .attr("text-anchor", "end")
                .attr("y", chartHeight + 100)
                .attr("x", chartWidth / 2)
                .attr("dy", ".75em")
                .text("Tree Species");


            let leftGridlines = d3.axisLeft(countScale)
                .tickSize(-chartWidth - 10)
                .tickFormat("");

            annotations.append("g")
                .attr("class", "y axis")
                .attr("transform", `translate(${margin2.left - 10},${margin2.top})`)
                .call(leftAxis);

            annotations.append("g")
                .attr("class", "y gridlines")
                .attr("transform", `translate(${margin2.left - 10},${margin2.top})`)
                .call(leftGridlines);

            console.log(uniqueSpecies);

            let bottomAxis = d3.axisBottom(speciesScale);
            annotations.append("g")
                .attr("class", "x axis")
                .attr("transform", `translate(${margin2.left},${chartHeight + margin2.top + 10})`)
                .call(bottomAxis)
                .selectAll("text")
                .style("text-anchor", "end")
                .attr("font-size", 11)
                .attr("dx", "-.9em")
                .attr("dy", ".7em")
                .attr("transform", "rotate(-35)");


            chartArea.selectAll("rect.bar").data(count_data)
                .join('rect').attr('class', 'bar')
                .attr('fill', d => colorScale(d.species))
                .attr('x', d => speciesScale(d.species))
                .attr('y', d => countScale(d.count))
                .attr('height', d => countScale(0) - countScale(d.count))
                .attr('width', speciesScale.bandwidth());



        }


        requestData();

    </script>

</body>

</html>